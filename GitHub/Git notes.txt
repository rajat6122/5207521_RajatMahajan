                           --------------------------------GitHub Notes--------------------------------------------------

1. What is Version Control System (VCS)?
Tracks changes in files (usually code).

Allows collaboration between developers.

You can revert, compare, and merge changes.

2. What is Git?
Git is a popular version control system.

It was created by Linus Torvalds in 2005, and has been maintained by Junio Hamano since then.

It is used for:

It is a Distributed version control system (DVCS)
Tracking code changes
Tracking who made changes
Coding collaboration

Key Git Concepts
Repository: A folder where Git tracks your project and its history.
Clone: Make a copy of a remote repository on your computer.
Stage: Tell Git which changes you want to save next.
Commit: Save a snapshot of your staged changes.
Branch: Work on different versions or features at the same time.
Merge: Combine changes from different branches.
Pull: Get the latest changes from a remote repository.
Push: Send your changes to a remote repository.

 3. Git Basics & Commands

git config --global user.name "Your Name"
git config --global user.email "you@example.com"

git init                     # Create new repo or reinitialize
git clone <repo-url>         # Clone existing repo

git status                   # See current changes
git log                      # View commit history

git add <file>               # Stage one file or move workspace aare to staging area
git add .                    # Stage all files
git commit -m "message"      # Commit with message
git commit --amend -m "message"      # update the Commited message


git branch                   # List branches
git branch <name>            # Create branch
git checkout <name>          # Switch branch
git checkout -b <name>       # Create & switch

git merge <branch>           # Merge into current branch
git rebase <branch>          # Rebase onto branch

git push                     # Push to remote
git pull                     # Pull & merge
git fetch                    # Download without merge

git reset HEAD~1             # Undo last commit, keep changes
git checkout -- <file>       # Discard changes in file

git branch -d <branch>       # Delete local branch
git rm <file>                # Delete file from repo

git remote -v                # View remotes
git remote add origin <url>  # Add remote repo

Always commit small changes with clear messages.

Use .gitignore               #to skip unwanted files.

git stash                  #to save temp changes and revert back to last commit and only work before commit.

git diff                      # Best practice do it before commit and shows changes between your working directory and staging area

git diff --staged             #shows changes between your staging area and the last commit

git branch	                      #Lists all branches in the repository.

git branch <branch-name>            	#Creates a new branch with the specified name.

git branch -d <branch-name>	    #Deletes the specified branch.

git branch -a	                      #Lists all local and remote branches.

git branch -r                    	#Lists all remote branches.

git checkout <branch-name>       	#Switches to the specified branch.

git checkout -b <new-branch-name>	#Creates a new branch and switches to it.

git checkout -- <file>	               #Discards changes made to the specified file and revert it to the version in the last commit.

git merge <branch>	             #Merges the specified branch into the current branch.

git log	                           #Displays the commit history of the current branch.

git log <branch-d	         #Displays the commit history of the specified branch.



