                           --------------------------------GitHub Notes--------------------------------------------------

🧠 1. What is Version Control System (VCS)?
Tracks changes in files (usually code).

Allows collaboration between developers.

You can revert, compare, and merge changes.

2. What is Git?
Git is a popular version control system.

It was created by Linus Torvalds in 2005, and has been maintained by Junio Hamano since then.

It is used for:

It is a Distributed version control system (DVCS)
Tracking code changes
Tracking who made changes
Coding collaboration

Key Git Concepts
Repository: A folder where Git tracks your project and its history.
Clone: Make a copy of a remote repository on your computer.
Stage: Tell Git which changes you want to save next.
Commit: Save a snapshot of your staged changes.
Branch: Work on different versions or features at the same time.
Merge: Combine changes from different branches.
Pull: Get the latest changes from a remote repository.
Push: Send your changes to a remote repository.

 3. Git Basics & Commands

git config --global user.name "Your Name"
git config --global user.email "you@example.com"

git init                     # Create new repo or reinitialize
git clone <repo-url>         # Clone existing repo

git status                   # See current changes
git log                      # View commit history

git add <file>               # Stage one file or move workspace aare to staging area
git add .                    # Stage all files
git commit -m "message"      # Commit with message
git commit --amend -m "message"      # update the Commited message


git branch                   # List branches
git branch <name>            # Create branch
git checkout <name>          # Switch branch
git checkout -b <name>       # Create & switch

git merge <branch>           # Merge into current branch
git rebase <branch>          # Rebase onto branch

git push                     # Push to remote
git pull                     # Pull & merge
git fetch                    # Download without merge

git reset HEAD~1             # Undo last commit, keep changes
git checkout -- <file>       # Discard changes in file

git branch -d <branch>       # Delete local branch
git rm <file>                # Delete file from repo

git remote -v                # View remotes
git remote add origin <url>  # Add remote repo

Always commit small changes with clear messages.

Use .gitignore               #to skip unwanted files.

git stash                  #to save temp changes and revert back to last commit and only work before commit.

git diff                      # Best practice do it before commit and shows changes between your working directory and staging area

git diff --staged             #shows changes between your staging area and the last commit

git branch	                      #Lists all branches in the repository.

git branch <branch-name>            	#Creates a new branch with the specified name.

git branch -d <branch-name>	    #Deletes the specified branch.

git branch -a	                      #Lists all local and remote branches.

git branch -r                    	#Lists all remote branches.

git checkout <branch-name>       	#Switches to the specified branch.

git checkout -b <new-branch-name>	#Creates a new branch and switches to it.

git checkout -- <file>	               #Discards changes made to the specified file and revert it to the version in the last commit.

git merge <branch>	             #Merges the specified branch into the current branch.

git log	                           #Displays the commit history of the current branch.

git log <branch-d	         #Displays the commit history of the specified branch.




✅ 1. VIM Editor in Git (Full Form + Use)
Full Form: VIM = Vi IMproved

Purpose: It's a text editor used in the terminal. Git uses it when you do things like merging, committing, and rebase.

In Git: During a merge conflict, VIM may open to let you edit and resolve conflicts manually.

Basic VIM commands:

Press i → Insert mode (to type/edit)

Press Esc → Exit insert mode

Type :wq → Save and quit

Type :q! → Quit without saving

✅ 2. Git Rebase vs Merge (Simple Explanation)
▶️ Git Merge:
Combines changes from one branch (like feature) into another (like main)

Keeps the branch history intact (multiple commits).

Example:

git checkout main
git merge feature
Result: A new merge commit is created.

▶️ Git Rebase:
Moves or replays your branch commits on top of another branch

Makes the history cleaner (linear history).

Example:

git checkout feature
git rebase main
Result: No merge commit; history is straight.

🆚 Difference between Rebase and Merge

Feature	                     Git Merge	             |                   Git Rebase

History	                    Keeps all commits	                      Rewrites commits
Merge Commit	                 Yes	                                     No
Clean History	                  No	                                    Yes
Safer	                         Yes	                               Use with caution

✅ 3. What is a Merge Conflict?
Happens when:

You and someone else both change the same line of code in different branches.

Git doesn’t know which version to keep.

How to resolve it?

Git shows conflict markers (<<<<<<<, =======, >>>>>>>)

Edit the file to choose the correct version.

Save and run:

git add <filename>
git commit
✅ 4. Git First-Time Setup (from Scratch)

🔸 Bottom-Up Approach (Start from zero)
Install Git (if not done already)

Create a new folder for your project

Run these:

git init                # Start a Git repo
git config --global user.name "Your Name"
git config --global user.email "your@email.com"
touch README.md         # Add README
git add .               # Stage all files
git commit -m "first commit"
Create a GitHub repo → copy the remote URL

Link local to remote:

git remote add origin <repo-URL>
git push -u origin main


🔸 Top-Down Approach (Clone Existing Project)
Clone repo:

git clone <repo-URL>
cd <folder-name>
Make changes

Commit and push:

git add .
git commit -m "your message"
git push origin main
✅ 5. If using PAT (Personal Access Token):
If HTTPS asks for username/password:

Use your GitHub username

Use token as password (not your GitHub password)

🔁 Quick Git Commands (Cheat Sheet)
Command	Use
git init	Start new Git repo
git clone <url>	Clone remote repo
git status	Check status
git add .	Stage all changes
git commit -m "msg"	Save changes
git push	Send to GitHub
git pull	Get latest changes
git branch	View branches
git checkout -b name	Create & switch branch
git merge name	Merge branch
git rebase name	Rebase branch
git log	View commit history

---------------------------------------------------------------------------------------------

✅ Step-by-Step: Using Git in a Company Project (First Time)
🧱 1. Setup Git (One-time only)

git config --global user.name "Your Name"
git config --global user.email "your@email.com"

📁 2. Clone the Project Repository
(Company will share GitHub/GitLab repo URL or token access)

git clone <repo_url>
Example:

git clone https://github.com/company/project.git
👉 This creates a folder named project.

📂 3. Go into the Project Folder

cd project
🔀 4. Check the Current Branch

git branch
Usually, it will be:

main or master

You may be asked to work on a feature branch

⬇️ 5. Always Pull Latest Code Before Any Work

git pull
This ensures your local code is up to date.

🌿 6. Create a New Branch for Your Task

git checkout -b feature/task-name
Example:

git checkout -b feature/login-form
🛠️ 7. Do Your Code Changes Locally
Edit, add files, or fix bugs in your code editor.

📌 8. Check File Status

git status
It shows what is modified or added.

➕ 9. Add Changes to Staging

git add .
Or add a specific file:

git add filename.js
📝 10. Commit Your Changes

git commit -m "Added login form UI"
⬆️ 11. Push Your Branch to Remote

git push origin feature/login-form
🔁 12. Create a Pull Request (PR)
Go to GitHub/GitLab.

Compare your branch with main or dev.

Create PR with title, description, issue ID if any.

👀 13. Wait for Code Review
Seniors/teammates review your code.

You may get comments or be asked to fix something.

🧹 14. Update Branch If Main Has New Changes
Before merging:

git checkout main
git pull
git checkout feature/login-form
git rebase main
If conflict:

Fix files.

Run:
git add .
git rebase --continue

✅ 15. After Review, Merge the PR
Either you or reviewer merges PR to main.

🗑️ 16. Delete Merged Branch (Optional)

git branch -d feature/login-form      # local delete
git push origin --delete feature/login-form   # remote delete
Let me know if you want the "Bottom-up vs Top-down", merge vs rebase, or a visual flow too.


🔄 Merge vs Rebase (with Visuals and Use Cases)
🔁 Merge – Keeps history as-is

git checkout feature
git merge main
🧠 Meaning:

Brings main into feature

Keeps all commit history

Adds a merge commit

📊 Visual:

main:    A---B---C
               \
feature:        D---E
                     \
after merge:         F (merge commit)
✅ Use when:

You want to preserve full history

In teams with many contributors

🔃 Rebase – Rewrites history

git checkout feature
git rebase main
🧠 Meaning:

Puts your feature work on top of the latest main

Makes history clean

📊 Visual:

mathematica

main:    A---B---C
               \
feature:        D---E (before)
               becomes
feature:              D'--E' (after rebase)
✅ Use when:

You want a clean, linear history

You haven't pushed yet

You are comfortable resolving conflicts

⚠️ Don’t rebase public branches that others are using!

📌 Summary Table
Action	Command	Keeps History	Clean History	Adds Merge Commit
Merge	git merge main	✅ Yes	❌ No	✅ Yes
Rebase	git rebase main	❌ No	✅ Yes	❌ No

🔽 Bottom-Up vs Top-Down Development (Simple Terms)
⬇️ Top-Down
Start from overall structure, then go to details.

Example: You build the whole UI and flow, then connect backend.

✅ Useful when:

You want to deliver an MVP fast

Good for design-first approach

⬆️ Bottom-Up
Start with small components/functions, then integrate.

Example: First write a login function, then add UI for it.

✅ Useful when:

You’re working on logic-heavy or reusable code

Suitable for modular projects

